#+TITLE: Emacs Configuration
#+AUTHOR: Tom Schutter

* Standard Directories

Configure where Emacs stores and finds various files.

** Define Python-like ~os-path-join~ function

See [[http://stackoverflow.com/questions/3964715/what-is-the-correct-way-to-join-multiple-path-components-into-a-single-complete][stackoverflow.com]].

#+BEGIN_SRC emacs-lisp
  (defun os-path-join (root &rest dirs)
    "Joins a series of directories together, like Python's os.path.join,
    (os-path-join \"/tmp\" \"a\" \"b\" \"c\") => /tmp/a/b/c"

    (if (not dirs)
        root
      (apply 'os-path-join
             (expand-file-name (car dirs) root)
             (cdr dirs))))
#+END_SRC

** Determine the location of the ~.emacs.d~ directory

#+BEGIN_SRC emacs-lisp
(defvar emacs-d-directory (file-name-directory load-file-name))
#+END_SRC

** Add ~.emacs.d/elisp/~ to ~load-path~

Prepend ~.emacs.d/elisp/~ to ~load-path~.  We used to append all of
its subdirectories as well, but they no longer exist.

#+BEGIN_SRC emacs-lisp
  (add-to-list
   'load-path
   (file-name-as-directory (os-path-join emacs-d-directory "elisp")))
#+END_SRC

** Define ~emacs-cache-dir~ for location of state and cache files

#+BEGIN_SRC emacs-lisp
  (defvar emacs-cache-dir
    (file-name-as-directory
     (os-path-join
      (or (getenv "XDG_CACHE_HOME")
          (expand-file-name "~/.cache/"))
      "emacs")))
  (make-directory emacs-cache-dir t)  ; create it if it does not exist
  (set-file-modes emacs-cache-dir #o700)  ; and make it private
#+END_SRC

** Put all backups in ~$HOME/.cache/emacs/backups/~

By default, Emacs saves backup files in the current directory.  See
http://www.emacswiki.org/emacs/BackupDirectory

#+BEGIN_SRC emacs-lisp
  (defvar backup-directory (file-name-as-directory (os-path-join emacs-cache-dir "backups")))
  (setq backup-directory-alist `((".*" . ,backup-directory)))
#+END_SRC

** Put all auto-save files in ~$HOME/.cache/emacs/auto-save/~

See http://www.emacswiki.org/emacs/AutoSave

#+BEGIN_SRC emacs-lisp
  (defvar auto-save-directory (file-name-as-directory (os-path-join emacs-cache-dir "auto-save")))
  (setq auto-save-list-file-prefix auto-save-directory)
  (setq auto-save-file-name-transforms `((".*" ,auto-save-directory t)))
#+END_SRC

* Server Mode

Start an Emacs server if it is not already running.

#+BEGIN_SRC emacs-lisp
  (require 'server)
  ;; Move server-auth-dir from .emacs.d to %TMP%.  If Emacs complains
  ;; that the directory is unsafe, change the ownership from
  ;; Administrators to yourself.
  (if (eq system-type 'windows-nt)
      (setq server-auth-dir (file-name-as-directory (os-path-join (getenv "TMP") "emacs"))))
  (unless (server-running-p)
    (server-start))
#+END_SRC

* Display

** Configure window title

#+BEGIN_SRC emacs-lisp
(setq frame-title-format (concat "%b@" system-name))  ;%b = buffer name
#+END_SRC

** Set default font

Setting the font here is problematic because it triggers a window
resize, which may push the window off of the screen.

#+BEGIN_SRC emacs-lisp
  (if (and window-system (eq system-type 'windows-nt))
        (set-face-attribute 'default nil :font "Consolas-11"))
#+END_SRC

** Turn off blinking cursor

Blinking cursors are obnoxious.

#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 0)
#+END_SRC

** Configure the mode line

Display the size of the buffer, line number, and column number in the
mode line.

#+BEGIN_SRC emacs-lisp
  (size-indication-mode 1)
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC

Display the current function name in the mode line.

#+BEGIN_SRC emacs-lisp
  (which-function-mode 1)
#+END_SRC

** Display line numbers

Display line numbers on the left side of the window.  Always use 5
columns and display in all buffers.  See
http://www.emacswiki.org/emacs/LineNumbers

#+BEGIN_SRC emacs-lisp
  (use-package nlinum
    :init
    (setq nlinum-format "% 5d")
    (global-nlinum-mode))
#+END_SRC

** Highlight uncommitted git changes

#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p)
    (use-package git-gutter+
      :diminish git-gutter+-mode  ;; do not display in mode-line
      :config
      (progn
        (use-package git-gutter-fringe+)
        (global-git-gutter+-mode 1))))
#+END_SRC

** Enable advanced highlighting of matching parenthesis

Display highlighting on whatever parenthesis (and paired delimiter if
you like this) matches the one before or after point.

#+BEGIN_SRC emacs-lisp
  (use-package mic-paren
    :init
    (setq paren-sexp-mode t)  ; Always highlight the whole s-expression.
    :config
    (add-hook 'prog-mode-hook 'paren-activate)
    (add-hook 'LaTeX-mode-hook
              (function (lambda ()
                          (paren-toggle-matching-quoted-paren 1)
                          (paren-toggle-matching-paired-delimiter 1))))
    (add-hook 'c-mode-common-hook
              (function (lambda ()
                          (paren-toggle-open-paren-context 1)))))
#+END_SRC

* Keyboard and Mouse

** Map pairs of simultaneously pressed keys to commands

Load key-chord mode.

#+BEGIN_SRC emacs-lisp
  (use-package key-chord
    :init
    (key-chord-mode 1))
#+END_SRC

Press "--" to insert "_".  No shift key required.

#+BEGIN_SRC emacs-lisp
  (key-chord-define-global
   "--"
   (lambda () (interactive) (insert "_")))
#+END_SRC

** Define various key bindings

See [[http://ergoemacs.org/emacs/keystroke_rep.html][Emacs's Key Syntax Explained]].

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-z") 'undo)   ;overrides suspend-frame
  (global-set-key (kbd "C-S-z") 'redo)
  (global-set-key (kbd "<kp-7>") (lambda () "" (interactive) (find-file "~/.plan")))
  (global-set-key (kbd "<kp-8>") (lambda () (interactive) (diary) (other-window 1)))
  (global-set-key (kbd "<kp-9>") 'calendar)
  (global-set-key (kbd "C-h n") 'man)  ;overrides view-emacs-news
#+END_SRC

** Display incomplete key commands

Display the key bindings following your currently entered incomplete
command (prefix) in a popup.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :init
    (which-key-mode)
    (which-key-setup-side-window-right-bottom)
    (setq which-key-idle-delay 1.0))
#+END_SRC

** Change M-w to copy current line if region not selected

[[https://github.com/leoliu/easy-kill][easy-kill]] provides commands to let users kill or mark things easily.

~M-w~ alone saves in the order of active region, url, email and
finally the current line.

~M-w~ can also be used as a prefix key:
1) ~M-w w~: save word at point
2) ~M-w s~: save sexp at point
3) ~M-w l~: save list at point (enclosing sexp)
4) ~M-w d~: save defun at point
5) ~M-w D~: save current defun name
6) ~M-w f~: save file at point
7) ~M-w b~: save buffer-file-name

For example, ~M-w w~ saves the current word, and repeating ~w~ expands
the kill to include the next word.

#+BEGIN_SRC emacs-lisp
  (use-package easy-kill
    :config
    (global-set-key [remap kill-ring-save] 'easy-kill))
#+END_SRC

** Configure ~Mouse-2~ to yank at point instead of at click

Do not move point on ~Mouse-2~; just insert the text at point,
regardless of where ~Mouse-2~ was clicked.  This is especially
important when using a touchpad.

#+BEGIN_SRC emacs-lisp
  (setq mouse-yank-at-point t)
#+END_SRC

** Configure clipboard interactions

Use the "clipboard" selection (the one typically is used by C-c/C-v)
instead of the X-Windows primary selection (which uses
mouse-select/middle-button-click).

See http://hugoheden.wordpress.com/2009/03/08/copypaste-with-emacs-in-terminal/

#+BEGIN_SRC emacs-lisp
  (setq x-select-enable-clipboard t)
#+END_SRC

If emacs is run in a terminal, the clipboard functions have no effect.
We use xsel instead.  If running under cygwin, we need to modify to
use putclip/getclip instead or xsel.

#+BEGIN_SRC emacs-lisp
  (unless window-system
    (when (getenv "DISPLAY")
      ;; Callback for when user cuts
      (defun xsel-cut-function (text &optional push)
        ;; Insert text to temp-buffer, and "send" content to xsel stdin
        (with-temp-buffer
          (insert text)
          ;; I prefer using the "clipboard" selection (the one the
          ;; typically is used by c-c/c-v) before the primary selection
          ;; (that uses mouse-select/middle-button-click)
          (call-process-region (point-min) (point-max) "xsel" nil 0 nil "--clipboard" "--input")))
      ;; Call back for when user pastes
      (defun xsel-paste-function ()
        ;; Find out what is current selection by xsel. If it is different
        ;; from the top of the kill-ring (car kill-ring), then return
        ;; it. Else, nil is returned, so whatever is in the top of the
        ;; kill-ring will be used.
        (let ((xsel-output (shell-command-to-string "xsel --clipboard --output")))
          (unless (string= (car kill-ring) xsel-output)
            xsel-output )))
      ;; Attach callbacks to hooks
      (setq interprogram-cut-function 'xsel-cut-function)
      (setq interprogram-paste-function 'xsel-paste-function)
      ;; Idea from
      ;; http://shreevatsa.wordpress.com/2006/10/22/emacs-copypaste-and-x/
      ;; http://www.mail-archive.com/help-gnu-emacs@gnu.org/msg03577.html
      ))
#+END_SRC

* Files

Configure how files are selected and found.

** Selecting files in the minibuffer

Ignore case.

#+BEGIN_SRC emacs-lisp
(setq read-file-name-completion-ignore-case t)
#+END_SRC

Ignore files with certain extensions.

#+BEGIN_SRC emacs-lisp
(mapc (lambda (x)
        (add-to-list 'completion-ignored-extensions x))
      '(".exe" ".pdf"))
#+END_SRC

** Recent files

Enable File -> Open Recent.  This list is is automatically saved
across Emacs sessions.

See http://www.emacswiki.org/emacs/RecentFiles

#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :demand
    :init
    (setq recentf-save-file (os-path-join emacs-cache-dir "recentf"))
    (recentf-mode 1)
    :bind
    ("<kp-4>" . recentf-open-files))
#+END_SRC

** Default to filename at point for ~C-x C-f~.

When opening a file using ~C-x C-f~, suggest the filename at point.  I
tried ido-mode, but I don't like the M-p, M-n behaviour.  See
http://www.emacswiki.org/emacs/FindFileAtPoint

#+BEGIN_SRC emacs-lisp
  (require 'ffap)
  (ffap-bindings)
  (setq ffap-machine-p-known 'accept)   ; No pinging
  (setq ffap-ftp-regexp nil)            ; Disable FTP
  (setq ffap-ftp-sans-slash-regexp nil) ; Disable FTP

  ;;; On UNIX, all strings starting with / are recognized as a path.
  ;;; This is annoying especially on closing XML tags.
  ;;; The following advice ignores / as a wrong result.
  (defadvice ffap-file-at-point (after ffap-file-at-point-after-advice ())
    "Advise ffap to ignore files starting with /."
    (if (string= ad-return-value "/")
        (setq ad-return-value nil)))
  (ad-activate 'ffap-file-at-point)

  ;;; Check ffap string for line-number and goto it.
  (defvar ffap-file-at-point-line-number nil
    "Variable to hold line number from the last `ffap-file-at-point' call.")
  (defadvice ffap-file-at-point (after ffap-store-line-number activate)
    "Search `ffap-string-at-point' for a line number pattern and save it in `ffap-file-at-point-line-number' variable."
    (let* ((string (ffap-string-at-point)) ;; string/name definition copied from `ffap-string-at-point'
           (name
            (or (condition-case nil
                    (and (not (string-match "//" string)) ; foo.com://bar
                         (substitute-in-file-name string))
                  (error nil))
                string))
           (line-number-string
            (and (string-match ":[0-9]+" name)
                 (substring name (1+ (match-beginning 0)) (match-end 0))))
           (line-number
            (and line-number-string
                 (string-to-number line-number-string))))
      (if (and line-number (> line-number 0))
          (setq ffap-file-at-point-line-number line-number)
        (setq ffap-file-at-point-line-number nil))))
  (defadvice find-file-at-point (after ffap-goto-line-number activate)
    "If `ffap-file-at-point-line-number' is non-nil goto this line."
    (when ffap-file-at-point-line-number
      (goto-line ffap-file-at-point-line-number)
      (setq ffap-file-at-point-line-number nil)))

  ;;; Search for files in directories other than the current.
  ;;;
  ;;; I was using ff-paths for this, but it breaks {svn,git} checkins,
  ;;; opening files that don't exist yet, TRAMP, and other things I have
  ;;; already forgotten.
  ;;;
  ;;; Add root directories to ffap-c-path in "~/.emacs-local.el":
  ;;;   (add-to-list 'ffap-c-path "~/src/myproj")
  (add-to-list 'ffap-c-path "~/src")
  (setq ffap-alist (append ffap-alist '(("\\.py\\'" . ffap-c-mode))))
#+END_SRC

** TRAMP remote file access

To activate, open file of the form /machine:localname
See http://www.gnu.org/software/tramp/

#+BEGIN_SRC emacs-lisp
  (require 'tramp)
  (require 'tramp-cache)
  (require 'tramp-sh)
  (setq tramp-default-method "ssh")
  (setq tramp-persistency-file-name (os-path-join emacs-cache-dir "tramp"))
  (if (< emacs-major-version 24) ; broken in emacs-24
      (setq tramp-remote-process-environment
            (split-string
             (replace-regexp-in-string
              "HOME/\.tramp_history"
              "HOME/.cache/emacs/tramp_history"
              (mapconcat 'identity tramp-remote-process-environment "|"))
             "|")))  ; move ~/.tramp_history file created on target to ~/.cache/emacs
#+END_SRC

* Buffers

Buffer manipulation.

** Uniquely indentify buffers

Make two buffers with the same file name open distinguishable.

#+BEGIN_SRC emacs-lisp
  (setq-default uniquify-buffer-name-style 'forward)
  ;(setq uniquify-ignore-buffers-re "^\\*") ; don't muck with special buffers
#+END_SRC

** Enable switching between buffers using substrings

See [[http://www.emacswiki.org/emacs/InteractivelyDoThings][emacswiki IDO]].

#+BEGIN_SRC emacs-lisp
  (use-package ido
    :init
    (ido-mode t))
#+END_SRC

** Switch between buffers

- ~C-S-tab~ - previous user buffer
- ~C-tab - next user buffer
- ~kp-subtract~ - close current buffer

#+BEGIN_SRC emacs-lisp
  (defun close-current-buffer ()
    "Close the current buffer.

     Similar to (kill-buffer (current-buffer)) with the following additions:

     - Prompt user to save if the buffer has been modified even if the
       buffer is not associated with a file.
     - Make sure the buffer shown after closing is a user buffer.

     A special buffer is one who's name starts with *.
     Else it is a user buffer."
    (interactive)
    (let (special-buffer-p is-special-buffer-after)
      (if (string-match "^*" (buffer-name))
          (setq special-buffer-p t)
        (setq special-buffer-p nil))

      ;; Offer to save buffers that are non-empty and modified, even for
      ;; non-file visiting buffer.  Because kill-buffer does not offer
      ;; to save buffers that are not associated with files.
      (when (and (buffer-modified-p)
                 (not special-buffer-p)
                 (not (string-equal major-mode "dired-mode"))
                 (if (equal (buffer-file-name) nil)
                     (if (string-equal "" (save-restriction (widen) (buffer-string))) nil t)
                   t
                   )
                 )
        (if (yes-or-no-p
             (concat "Buffer " (buffer-name) " modified; kill anyway? "))
            (save-buffer)
          (set-buffer-modified-p nil)))

      ;; close
      (kill-buffer (current-buffer))

      ;; if emacs buffer, switch to a user buffer
      (if (string-match "^*" (buffer-name))
          (setq is-special-buffer-after t)
        (setq is-special-buffer-after nil))
      (when is-special-buffer-after
        (next-user-buffer))
      ))

  (defun next-user-buffer ()
    "Switch to the next user buffer in cyclic order.
  User buffers are those not starting with *."
    (interactive)
    (next-buffer)
    (let ((i 0))
      (while (and (string-match "^*" (buffer-name)) (< i 50))
        (setq i (1+ i)) (next-buffer))))

  (defun previous-user-buffer ()
    "Switch to the previous user buffer in cyclic order.
  User buffers are those not starting with *."
    (interactive)
    (previous-buffer)
    (let ((i 0))
      (while (and (string-match "^*" (buffer-name)) (< i 50))
        (setq i (1+ i)) (previous-buffer))))

  (global-set-key (kbd "<C-S-iso-lefttab>") 'previous-user-buffer)
  (global-set-key (kbd "<C-tab>") 'next-user-buffer)
  (global-set-key (kbd "<kp-subtract>") 'close-current-buffer)
#+END_SRC

** Rename buffer and the file it is visiting

#+BEGIN_SRC emacs-lisp
  (defun rename-current-buffer-file ()
    "Renames current buffer and file it is visiting."
    (interactive)
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (error "Buffer '%s' is not visiting a file!" name)
        (let ((new-name (read-file-name "New name: " filename)))
          (if (get-buffer new-name)
              (error "A buffer named '%s' already exists!" new-name)
            (rename-file filename new-name 1)
            (rename-buffer new-name)
            (set-visited-file-name new-name)
            (set-buffer-modified-p nil)
            (message "File '%s' successfully renamed to '%s'"
                     name (file-name-nondirectory new-name)))))))
  (global-set-key (kbd "C-x C-r") 'rename-current-buffer-file)
#+END_SRC

** Scratch buffer

*** Suppress initial message in scratch buffer; we know what it is for

#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message nil)
#+END_SRC

*** Respawn the scratch buffer if it is killed (C-x k)

#+BEGIN_SRC emacs-lisp
  (defun kill-scratch-buffer ()
    "Kill the *scratch* buffer and then respawn it."
    ;; The next line is just in case someone calls this manually
    (set-buffer (get-buffer-create "*scratch*"))

    ;; Kill the current (*scratch*) buffer
    (remove-hook 'kill-buffer-query-functions 'kill-scratch-buffer)
    (kill-buffer (current-buffer))

    ;; Make a brand new *scratch* buffer
    (set-buffer (get-buffer-create "*scratch*"))
    (lisp-interaction-mode)
    (make-local-variable 'kill-buffer-query-functions)
    (add-hook 'kill-buffer-query-functions 'kill-scratch-buffer)

    ;; Since we killed it, don't let caller do that.
    nil)
  (kill-scratch-buffer)  ;install the hook
#+END_SRC

* Navigation

** Searching

When searching forward [Return] ends the search, but puts the point at
the end of the found text.  Define [Ctrl+Return] to put point at the
beginning.  See http://www.emacswiki.org/emacs/ZapToISearch

#+BEGIN_SRC emacs-lisp
  (defun isearch-exit-other-end (rbeg rend)
    "Exit isearch, but at the other end of the search string (RBEG REND).
  This is useful when followed by an immediate kill."
    (interactive "r")
    (isearch-exit)
    (goto-char isearch-other-end))
  (define-key isearch-mode-map [(control return)] 'isearch-exit-other-end)
#+END_SRC

** Goto line

Provide an easy goto-line (^C-g).

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c g") 'goto-line)
#+END_SRC

** Track EOL

Vertical motion starting at EOL keeps to EOL.

#+BEGIN_SRC emacs-lisp
  (setq track-eol t)
#+END_SRC

** Scroll one line at a time instead of paging

Paging is what PgUp and PgDn are for.

#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC

** PgUp and PgDn as inverse functions

Remember and restore point location after PgUp and PgDn.

#+BEGIN_SRC emacs-lisp
(setq scroll-preserve-screen-position t)
#+END_SRC

** Bookmarks

Bookmarking commands:

- ~C-x r m~ - set a bookmark at the current location
- ~C-x r b~ - jump to a bookmark
- ~C-x r l~ - list your bookmarks
- ~M-x bookmark-delete~ - delete a bookmark by name

See [[http://emacswiki.org/emacs/BookMarks][emacswiki Book Marks]].

#+BEGIN_SRC emacs-lisp
  (use-package bookmark
    :config
    (setq bookmark-default-file (os-path-join emacs-cache-dir "emacs.bmk"))

    :bind
    (("<kp-1>" . bookmark-bmenu-list)
     ("<kp-2>" . bookmark-set)
     ("<kp-3>" . bookmark-jump)))
#+END_SRC

** Save and restore point (F3, F4)

#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "C-<f3>") '(lambda () (interactive) (point-to-register 33)))  ;^F3 Save
  (define-key global-map (kbd "<f3>") '(lambda () (interactive) (jump-to-register 33)))     ; F3 Restore
  (define-key global-map (kbd "C-<f4>") '(lambda () (interactive) (point-to-register 34)))  ;^F4 Save
  (define-key global-map (kbd "<f4>") '(lambda () (interactive) (jump-to-register 34)))     ; F4 Restore
#+END_SRC

** Jump between symbols

Jump between symbols in your buffer, based on the initial symbol your point was on when you started the search.

- ~M-n~ = jump to next symbol
- ~M-p~ = jump to previous symbol

See https://github.com/mickeynp/smart-scan.

#+BEGIN_SRC emacs-lisp
  (use-package smartscan
    :init
    (global-smartscan-mode 1))
#+END_SRC

** Goto last change in current buffer

Move through points at which you made edits in a buffer.

- ~C-c C-,~ = goto last change
- ~C-c C-.~ = goto next change

#+BEGIN_SRC emacs-lisp
   (use-package goto-chg
     :bind
     (("C-c C-," . goto-last-change)
      ("C-c C-." . goto-last-change-reverse)))
#+END_SRC

** Move between windows with shift-arrow keys

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "S-<left>") 'windmove-left)
  (global-set-key (kbd "S-<right>") 'windmove-right)
  (global-set-key (kbd "S-<up>") 'windmove-up)
  (global-set-key (kbd "S-<down>") 'windmove-down)
#+END_SRC

** Expand Region

Increases the selected region by semantic units. Just keep pressing
the C-= until it selects what you want.

An example:

  : (setq alphabet-start "abc def")

With the cursor at the c, it starts by marking the entire word abc,
then expand to the contents of the quotes abc def, then to the entire
quote "abc def", then to the contents of the sexp setq alphabet-start
"abc def" and finally to the entire sexp.

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :bind ("C-=" . er/expand-region))
#+END_SRC

** Dired

Show the file from point in the other window.  Use down/up or C-n/C-p
to display a different file.  Use SPC to scroll the peeped file down,
and C-SPC or backspace to scroll it up.

#+BEGIN_SRC emacs-lisp
      (use-package peep-dired
        :ensure t
        :defer t ; don't access `dired-mode-map' until `peep-dired' is loaded
        :config
        ;; kill peep buffers when peep mode is disabled
        (setq peep-dired-cleanup-on-disable t)
        ;; enable peeping when visiting directories from a peep-enabled directory
        (setq peep-dired-enable-on-directories t)
        ;; ignore certain files
        (setq peep-dired-ignored-extensions '("iso"))
        :bind (:map dired-mode-map
                    ("P" . peep-dired)))
#+END_SRC

* Writing

** Set default major mode to text-mode

Set default major mode to be text-mode instead of fundamental-mode.
Although the doc says that default-major-mode is obsolete since 23.2
and to use major-mode instead, setting major-mode doesn't work.

#+BEGIN_SRC emacs-lisp
  (setq default-major-mode 'text-mode)
#+END_SRC

** Delete selected text when typing

All other editors work this way, so let's not confuse ourselves.

#+BEGIN_SRC emacs-lisp
  (require 'delsel)  ;required for OpenSUSE-12.1 emacs-23.3-6.1.2
  (delete-selection-mode 1)
#+END_SRC

** Join lines

- ~M-^~ = join current line to one above
- ~M-j~ = join current line to one below

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-j") (lambda () (interactive) (join-line -1)))
#+END_SRC

** Clean up spaces

Cycle between 1, 0, or original spaces around point where spaces
includes newlines and tabs.

#+BEGIN_SRC emacs-lisp
    (if (and (>= emacs-major-version 24)
             (>= emacs-minor-version 4))
        (global-set-key (kbd "M-SPC") 'cycle-spacing)
      ;; Just delete newlines as well as spaces and tabs around point.
      (global-set-key (kbd "M-SPC") '(lambda () (interactive) (just-one-space -1))))
#+END_SRC

** Unfill paragraph

Press "M-Q" to perform the inverse of fill-paragraph ("M-q").  From
[[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]].

#+BEGIN_SRC emacs-lisp
    (defun my/unfill-paragraph (&optional region)
        "Takes a multi-line paragraph and makes it into a single line of text."
        (interactive (progn
                       (barf-if-buffer-read-only)
                       (list t)))
        (let ((fill-column (point-max)))
          (fill-paragraph nil region)))
    (bind-key "M-Q" 'my/unfill-paragraph)
#+END_SRC

** Insert datetime into current buffer (^C-d)

#+BEGIN_SRC emacs-lisp
  (defun insert-date ()
    "Insert date time string into current buffer."
    (interactive)
    (insert (format-time-string "%Y-%m-%d %H:%M:%S")))
  (global-set-key (kbd "C-c d") 'insert-date)
#+END_SRC

** Make URL human readable

Key binding?

#+BEGIN_SRC emacs-lisp
  (require 'url-humanify)  ; in ./elisp/
  ;theoretically the following should work, but it does not
  ;(use-package url-humanify
  ;  :load-path "./elisp/")
#+END_SRC

** Whitespace

*** Indentation should insert spaces, not tabs

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

*** Display and cleanup bogus whitespace

See http://www.emacswiki.org/emacs/WhiteSpace

#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :config
    (setq whitespace-style
          '(face trailing tabs empty indentation space-before-tab))
    (global-whitespace-mode 1)
    (setq whitespace-action '(auto-cleanup))
    (defun whitespace-disable-for-some-files ()
      "Disable whitespace mode for some files."
      (let ((extension (file-name-extension buffer-file-name)))
        (if (or (string-equal extension "sln")
                (string-match "sigrok" buffer-file-name))
            (progn
              (set (make-local-variable 'whitespace-style) '(nil))
              (set (make-local-variable 'whitespace-action) '(nil))
              (set (make-local-variable 'indent-tabs-mode) t)))))
    (add-hook 'find-file-hook 'whitespace-disable-for-some-files))
#+END_SRC

*** If we do see tabs, they are 4 chars wide

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
#+END_SRC

*** Require final newline

If there is no newline at the end of the file, append one when saving.
This should not be necessary because most modes should set
require-final-newline to mode-require-final-newline, but most do not
(Emacs-Lisp for one).  The risk here is if we open a binary file we
might append a newline.

#+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
#+END_SRC

*** Identify variables that are safe to be set as file variables ??

#+BEGIN_SRC emacs-lisp
  (put 'whitespace-line-column 'safe-local-variable 'integerp)
#+END_SRC

** Wrap region with punctuation

Select a region and then press ~"~, ~'~, ~(~, ~{~, or ~[~.  See [[https://github.com/rejeep/wrap-region.el][wrap-region package]].

#+BEGIN_SRC emacs-lisp
  (use-package wrap-region
    :config
    (add-hook 'org-mode-hook 'wrap-region-mode))
#+END_SRC

* Desktop

Saves the state of Emacs from one session to another. The buffers,
their file names, major modes, buffer positions, and so on are saved.

See http://www.emacswiki.org/emacs/DeskTop

#+BEGIN_SRC emacs-lisp
  (use-package desktop
    :if window-system
    :demand
    :config
    (desktop-save-mode 1)
    (setq desktop-base-file-name "desktop")  ;no need for leading dot
    (setq desktop-base-lock-name "desktop.lock")  ;no need for leading dot
    (setq desktop-path (list emacs-cache-dir))
    (setq desktop-load-locked-desktop nil)  ;do not load desktop if locked
    (add-to-list 'desktop-globals-to-save 'query-replace-history)  ; C-%
    (add-to-list 'desktop-globals-to-save 'log-edit-comment-ring)  ; *VC-log*
    (add-to-list 'desktop-globals-to-save 'bookmark-history)       ; C-x r b

    ;; Clean stale desktop.lock file.
    (defun emacs-process-p (pid)
      "If PID is the process ID of an Emacs process, return t, else nil.
       Also returns nil if pid is nil."
      (when pid
        (let ((attributes (process-attributes pid)) (cmd))
          (dolist (attr attributes)
            (if (string= "comm" (car attr))
                (setq cmd (cdr attr))))
          (if (and cmd (or (string= "emacs" cmd) (string= "emacs.exe" cmd))) t))))

    (defadvice desktop-owner (after pry-from-cold-dead-hands activate)
      "Don't allow dead emacsen to own the desktop file."
      (when (not (emacs-process-p ad-return-value))
        (setq ad-return-value nil))))
#+END_SRC

* Org Mode

#+BEGIN_SRC emacs-lisp
  (require 'org)
#+END_SRC

** Files

The value of org-directory is "~/org" by default.

*** Default file for notes

#+BEGIN_SRC emacs-lisp
  (setq org-default-notes-file (concat org-directory "/notes.org"))
#+END_SRC

** Global key bindings

#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-co" (lambda () (interactive) (find-file org-default-notes-file)))
  (global-set-key "\C-cl" 'org-store-link)
#+END_SRC

Wrap region.

- * = *bold*
- ~ = ~code~
- + = +strike-through+
- l = BEGIN_SRC emacs_lisp
- p = BEGIN_SRC python
- s = BEGIN_SRC sh (shell)

#+BEGIN_SRC emacs-lisp
  (wrap-region-add-wrapper "*" "*" nil 'org-mode)
  (wrap-region-add-wrapper "~" "~" nil 'org-mode)
  (wrap-region-add-wrapper "+" "+" nil 'org-mode)
  (wrap-region-add-wrapper "#+BEGIN_SRC emacs-lisp\n" "#+END_SRC\n" "l" 'org-mode)
  (wrap-region-add-wrapper "#+BEGIN_SRC python\n" "#+END_SRC\n" "p" 'org-mode)
  (wrap-region-add-wrapper "#+BEGIN_SRC sh\n" "#+END_SRC\n" "s" 'org-mode)
#+END_SRC

Insert a TODO item before the current item, no matter where we are in
the current item.

#+BEGIN_SRC emacs-lisp
  (key-chord-define
   org-mode-map "TT"
   (lambda () (interactive)
     (org-forward-heading-same-level 0)
     (org-insert-todo-heading t)))
#+END_SRC

** Capturing

Globally bind org-capture to "C-c c".

#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cc" 'org-capture)
#+END_SRC

Define a standard task template.

See http://orgmode.org/manual/Template-expansion.html#Template-expansion

#+BEGIN_SRC emacs-lisp
  (defvar my/org-basic-task-template "* TODO %^{Task}\n%?%i\nCaptured %<%Y-%m-%d %H:%M>")
#+END_SRC

Define templates used by org-capture ("C-c c").

#+BEGIN_SRC emacs-lisp
    (setq org-capture-templates
          `(("t" "Task" entry
             (file+headline (concat org-directory "/notes.org") "Inbox")
             ,my/org-basic-task-template
             :empty-lines 1)))
#+END_SRC

** Navigation

Globally bind org-iswitchb to "C-c b".

#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC

Configure org-refile ("C-c C-w") to use top three heading levels from
all org agenda files.

#+BEGIN_SRC emacs-lisp
  (setq org-refile-targets '((org-agenda-files . (:maxlevel . 3))))
#+END_SRC

When M-RET is pressed, go to the end of the line before making a new
entry.  The default is to split the line at cursor position, which I
rarely want to do.

#+BEGIN_SRC emacs-lisp
  (setq org-M-RET-may-split-line nil)
#+END_SRC

Pressing RET on a link will follow the link.

#+BEGIN_SRC emacs-lisp
  (setq org-return-follows-link t)
#+END_SRC

** Visualization

*** Indent text according to outline structure

See [[https://github.com/syl20bnr/spacemacs/issues/1833][Weird org + git gutter indentation bug #1833]].

#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t)
#+END_SRC

*** Disable "/" as indicating italics

As I type path names, I don't want the text to bounce between italics
and normal typefaces.  I rarely use italics anyways.

#+BEGIN_SRC emacs-lisp
  (delete '("/" italic "<i>" "</i>") org-emphasis-alist)
#+END_SRC

*** Ellipsis

Change the ellipsis "..." to something shorter to reduce visual
clutter.

- "\u2026" = HORIZONTAL ELLIPSIS
- "\u21b4" = RIGHTWARDS ARROW WITH CORNER DOWNWARDS
- "\u2935" = ARROW POINTING RIGHTWARDS THEN CURVING DOWNWARDS
  Note that this doesn't display correctly; empty boxes for all but
  the last.  2015-11-04.

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "\u2026")
#+END_SRC

** Journal and Archiving

Archive a task with org-archive-subtree ("C-c C-x C-s"), by appending
it to the journal.

#+BEGIN_SRC emacs-lisp
  (setq org-archive-location (concat org-directory "/journal.org" "::"))
#+END_SRC

** Org agenda

Globally bind org-agenda to "C-c a".

#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-ca" 'org-agenda)
#+END_SRC

*** Specify where to look for agenda files

#+BEGIN_SRC emacs-lisp
(setq org-agenda-files '())
(if (file-directory-p "~/org/")
    (add-to-list 'org-agenda-files "~/org/"))
#+END_SRC

*** Agenda custom commands

#+BEGIN_SRC emacs-lisp
(setq org-agenda-custom-commands
       `(;; match those that are not scheduled.
         ;; from http://stackoverflow.com/questions/17003338
         ("u" "Unscheduled tasks" tags "-SCHEDULED={.+}/!+TODO|+STARTED|+WAITING")
         ("n" "Agenda and all TODO's" ((agenda "") (alltodo)))))
#+END_SRC

*** Display two weeks in agenda

#+BEGIN_SRC emacs-lisp
(setq org-agenda-span 14)
#+END_SRC

*** Start agenda on today, not Monday

#+BEGIN_SRC emacs-lisp
(setq org-agenda-start-on-weekday nil)
#+END_SRC

*** Highlight entire selected agenda line

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-agenda-finalize-hook (lambda () (hl-line-mode)))
#+END_SRC

*** Warn of any deadlines in next 7 days

Default is 14 days.  I can't think about things due next week.

#+BEGIN_SRC emacs-lisp
  (setq org-deadline-warning-days 7)
#+END_SRC

** Org Babel BEGIN_SRC code blocks

Enable languages for #+BEGIN_SRC blocks.

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (sh . t)))
#+END_SRC

Fontify code in code blocks when viewing in the org file (as opposed
to when using C-').

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Do not ask for confirmation when evaluating code blocks with ~C-c
C-c~.  Disabling confirmation may result in accidental evaluation of
potentially harmful code.  But I never evaluate code blocks from
external sources.

#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

Replace results verbatim instead of replacing results with a table.
To restore the default for a specific code block, use ~#+BEGIN_SRC
<lang> :results verbatim~

#+BEGIN_SRC emacs-lisp
  (setq org-babel-default-header-args
        (cons '(:results . "replace verbatim")
              (assq-delete-all :results org-babel-default-header-args)))
#+END_SRC

* Calendar and Diary

#+BEGIN_SRC emacs-lisp
  (use-package calendar
    :config
    (add-hook 'today-visible-calendar-hook 'calendar-mark-today)
    (calendar-set-date-style 'iso)  ; parse dates in ~/diary
    (setq calendar-date-display-form
          '((format "%s-%.2d-%.2d, %s"
                    year
                    (string-to-number month)
                    (string-to-number day)
                    dayname)))  ; format displayed dates in diary
    (setq diary-number-of-entries 7)  ; number of days to display
    (setq diary-list-include-blanks t)  ; include empty days
    (add-hook 'list-diary-entries-hook 'sort-diary-entries t))  ; sort entries by time
#+END_SRC

** Encrypted diary handling

#+BEGIN_SRC emacs-lisp
  (load-library "mydiary")
#+END_SRC

* Eshell

See http://www.emacswiki.org/emacs/CategoryEshell

#+BEGIN_SRC emacs-lisp
  (use-package eshell
    :config
    (setq eshell-directory-name (file-name-as-directory (os-path-join emacs-cache-dir "eshell"))))
#+END_SRC

* Flycheck

See https://sourcegraph.com/github.com/robert-zaremba/flycheck

#+BEGIN_SRC emacs-lisp
   (use-package flycheck

     :bind
     (("<M-up>"   . flycheck-previous-error)
      ("<M-down>" . flycheck-next-error))

     :config
     ;; Enable flycheck mode in all buffers.
     (global-flycheck-mode)

     ;; On-the-fly spell checking.  See http://www.emacswiki.org/emacs/FlySpell
     (if (not (eq system-type 'windows-nt))
         (add-hook 'text-mode-hook 'turn-on-flyspell))

     ;; Save dictionary without confirmation.
     (setq ispell-silently-savep t))
#+END_SRC

Most checkers have dependencies against external tools that perform
the checking. Use C-c ! ? to see what a checker needs, e.g. C-c ! ?
python-pylint.

JSON checking requires jsonlint.

#+BEGIN_SRC sh
  sudo apt-get install nodejs-legacy npm
  sudo npm install jsonlint --global
#+END_SRC

* Miscellaneous

We don't need to see the startup message.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

And [[http://yann.hodique.info/blog/rant-obfuscation-in-emacs/][suppress the startup message in the echo area]] as well.

#+BEGIN_SRC emacs-lisp
  (put 'inhibit-startup-echo-area-message 'saved-value
       (setq inhibit-startup-echo-area-message (user-login-name)))
#+END_SRC

Get a definition of the word at point or from the minibuffer.

#+BEGIN_SRC emacs-lisp
    (use-package define-word
      :ensure t
      :config
      (setq define-word-limit 20)
      :bind (("s-d" . define-word-at-point)
             ("s-D" . define-word)))
#+END_SRC

** Printing

See http://www.emacswiki.org/emacs/PrintingFromEmacs

#+BEGIN_SRC emacs-lisp
  (use-package ps-print
    :config
    (setq ps-lpr-command "lp")
    (setq ps-number-of-columns 2)
    (setq ps-landscape-mode t)
    (setq ps-line-number t)
    (setq ps-print-color-p nil)
    (setq ps-print-header nil)
    (setq lpr-command "lp")
    (setq lpr-printer-switch "-d ")
    (setq lpr-add-switches nil)
    (setq lpr-page-header-switches '("-h" "%s" "-F" "--length=61" "--indent=4")))
#+END_SRC

** Email

*** Outgoing mail

#+BEGIN_SRC emacs-lisp
  (require 'smtpmail)
  (let* ((computername (downcase system-name))
         (prefixlen (min (length computername) 7))
         (prefix (substring computername 0 prefixlen))
         (realm
          (cond
           ((string-equal prefix "fdsv") "ISC")
           ((string-equal prefix "sps") "ISC")
           ((string-equal computername "apple") "ISC")
           ((string-equal computername "passion") "ISC")
           ((string-equal computername "wampi") "ISC")
           ((string-equal computername "wampi-win2003") "ISC")
           (t "HOME"))))
    (cond
     ((string-equal realm "ISC")
      (setq user-mail-address "tschutter@corelogic.com")
      (setq smtpmail-local-domain "corelogic.com")
      (setq smtpmail-smtp-server "smtp.corelogic.com"))
     (t
      (setq user-mail-address "t.schutter@comcast.net")
      (setq smtpmail-local-domain "schutter.home")
      (setq smtpmail-smtp-server "smtp.schutter.home"))))
  ;(setq smtpmail-debug-info t)  ;uncomment to debug problems
#+END_SRC

*** Composing mail

Use Message to compose mail.

#+BEGIN_SRC emacs-lisp
  (setq mail-user-agent 'message-user-agent)
  (setq message-send-mail-function 'smtpmail-send-it)
  (add-hook 'message-mode-hook 'turn-on-auto-fill) ;word wrap
#+END_SRC

*** Address book

Integration with Google contacts.

#+BEGIN_SRC emacs-lisp
  (require 'external-abook)  ; in ./elisp/
  (custom-set-variables '(external-abook-command
                          (concat
                           (os-path-join emacs-d-directory "bin" "goobook-external-abook")
                           "query '%s'"
                           )))
#+END_SRC

Following is not working.

#+BEGIN_SRC emacs-lisp
  (eval-after-load "message"
    '(progn
       (add-to-list 'message-mode-hook
                    '(lambda ()
                       (local-unset-key "\C-c TAB")
                       (define-key message-mode-map "\C-c TAB" 'external-abook-try-expand
                         )))))
#+END_SRC

** IM and Chat

*** ERC InternetRelayChat

#+BEGIN_SRC emacs-lisp
  (use-package erc
    :config
    (setq erc-nick "tschutter")
    (setq erc-prompt-for-password nil)
    (setq erc-autojoin-channels-alist
          '(("freenode.net" "#sigrok")))
    (setq erc-hide-list '("JOIN" "PART" "QUIT"))
    (setq erc-foolish-content '("^\*\*\* .*: topic set by "
                                "^\*\*\* .* modes: "
                                "^\*\*\* .* was created on"))

    (defun erc-foolish-content (msg)
      "Determine if MSG is foolish."
      (erc-list-match erc-foolish-content msg))
    (add-hook 'erc-insert-pre-hook
              (lambda (s)
                (when (erc-foolish-content s)
                  (setq erc-insert-this nil))))

    ; no erc-log package in melpa
    ;(use-package erc-log
    ;  :init
    ;  (erc-log-enable)
    ;  :config
    ;  (setq erc-log-channels-directory (file-name-as-directory (os-path-join emacs-cache-dir "irclog"))))

    ; no easymenu package in melpa
    ;(use-package easymenu
    ;  :init
    ;  (easy-menu-add-item  nil '("tools") ["IRC with ERC" erc t]))
    )
#+END_SRC

*** BitlBee gateway to IM networks

sudo apt-get install bitlbee-libpurple
http://emacs-fu.blogspot.com/search/label/erc
http://wiki.bitlbee.org/quickstart
http://wiki.bitlbee.org/bitlbee-sipe

#+BEGIN_SRC emacs-lisp
  (defun bitlbee-identify ()
    "Generate a message identifying ourself."
    (when (and (string= "localhost" erc-session-server)
               (string= "&bitlbee" (buffer-name)))
      (erc-message "PRIVMSG" (format "%s identify user %s"
                                     (erc-default-target)
                                     bitlbee-password))))
  (add-hook 'erc-join-hook 'bitlbee-identify)
  (defun chat ()
    "Connect to IM networks using bitlbee."
    (interactive)
    (require 'secrets "secrets.el.gpg")  ; in ./elisp/
    (erc :server "localhost" :port 6667 :nick bitlbee-nick))
  ; register user BITLBEE-PASSWORD
  ; account add yahoo tom.schutter YAHOO-PASSWORD
#+END_SRC

* Programming

** VC (Version Control)

*** Display warning instead of asking when visiting VC file via simlink

#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks nil)
#+END_SRC

*** Put list of files in default commit message

#+BEGIN_SRC emacs-lisp
  (use-package log-edit
    :config
    (if (string-equal system-name "takifugu") ; or should this be a 23.4 test?
        (setq log-edit-setup-invert nil)
      (setq log-edit-setup-invert t))
    (add-hook 'log-edit-hook
              (lambda ()
                (erase-buffer)  ; SETUP inserts stuff we don't want.
                (insert
                 (mapconcat 'identity (log-edit-files) ",")
                 ": "))))
#+END_SRC

*** Navigate previous versions of a git controlled file

Visit a git-controlled file and issue ~M-x git-timemachine~.

Use the following keys to navigate historic version of the file:
  - ~p~ Visit previous historic version
  - ~n~ Visit next historic version
  - ~w~ Copy the abbreviated hash of the current historic version
  - ~W~ Copy the full hash of the current historic version
  - ~g~ Goto nth revision
  - ~q~ Exit the time machine.

#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine)
#+END_SRC

** Compiling (F5)

The compiling section must come first, because it defines
smart-compile-alist which is updated by per-language sections.

*** Set compile command according to mode

#+BEGIN_SRC emacs-lisp
  (use-package smart-compile
    :demand  ; force loading immediately
    :config
    (add-to-list 'smart-compile-alist '(cmake-mode . "make -k"))
    (add-to-list 'smart-compile-alist '(python-mode . "pycheck %f -s")))
#+END_SRC

*** Force a vertical window split

#+BEGIN_SRC emacs-lisp
  (defadvice smart-compile (around split-horizontally activate)
    "Split window vertically when smart-compile is called."
    (let ((split-width-threshold nil)
          (split-height-threshold 0))
      ad-do-it))
  (setq compilation-window-height 10)
#+END_SRC

*** Bind smart-compile to F5

#+BEGIN_SRC emacs-lisp
  (global-set-key [f5] 'smart-compile)
#+END_SRC

*** Globally enable C-n, C-p to cycle through errors

#+BEGIN_SRC emacs-lisp
  (defun my-next-error ()
    "Move point to next error and highlight it."
    (interactive)
    (progn
      (next-error)
      (deactivate-mark)
      (end-of-line)
      (activate-mark)
      (beginning-of-line)
      ))
  (defun my-previous-error ()
    "Move point to previous error and highlight it."
    (interactive)
    (progn
      (previous-error)
      (deactivate-mark)
      (end-of-line)
      (activate-mark)
      (beginning-of-line)
      ))
  (global-set-key (kbd "C-n") 'my-next-error)
  (global-set-key (kbd "C-p") 'my-previous-error)
#+END_SRC

** CEDET

[[http://cedet.sourceforge.net/][CEDET]] is a Collection of Emacs Development Environment Tools written
with the end goal of creating an advanced development environment in
Emacs.

;#+BEGIN_SRC emacs-lisp
;  (use-package cedet
;    :init
;    (progn
;      ;; Add further minor-modes to be enabled by semantic-mode.  See
;      ;; doc-string of `semantic-default-submodes' for other things you can
;      ;; use here.
;      (dolist (submodes '(global-semantic-idle-summary-mode
;                          ))
;        (add-to-list 'semantic-default-submodes submodes t))
;
;      ;; Enable Semantic
;      (semantic-mode 1)))
;#+END_SRC

** Common debugging

*** Display a variable's value in a tooltip
#+BEGIN_SRC emacs-lisp
  (gud-tooltip-mode)
#+END_SRC

*** Use the echo area instead of frames for GUD tooltips

Needs work.

#+BEGIN_SRC emacs-lisp
  ;(setq gud-tooltip-echo-area t)
#+END_SRC

** Common Source Code Manipulation

*** Move current line up or down

<C-S-down> to move current line down.
<C-S-up> to move current line up.

#+BEGIN_SRC emacs-lisp
  (defun move-line-down ()
    "Move current line down."
    (interactive)
    (let ((col (current-column)))
      (save-excursion
        (forward-line)
        (transpose-lines 1))
      (forward-line)
      (move-to-column col)))
  (defun move-line-up ()
    "Move current line up."
    (interactive)
    (let ((col (current-column)))
      (save-excursion
        (forward-line)
        (transpose-lines -1))
      (move-to-column col)))
  (global-set-key (kbd "<C-S-down>") 'move-line-down)
  (global-set-key (kbd "<C-S-up>") 'move-line-up)
#+END_SRC

*** Line wrap function call or function definition

Bound to <f2>.

#+BEGIN_SRC emacs-lisp
  (defun region-line-wrap ()
    "Line wrap region, breaking at commas."
    (let ((newline (if (eq major-mode (quote vbnet-mode)) " _\n" "\n")))
      (save-excursion
        (save-restriction
          (narrow-to-region (mark) (point))
          (goto-char (point-min))
          (forward-char)
          (if (not (looking-at newline))
              (insert newline))
          (while (re-search-forward "," (point-max) t)
            (if (not (looking-at newline))
                (insert newline)))
          (goto-char (point-max))
          (backward-char)
          (beginning-of-line)
          (if (not (looking-at " *)$"))
              (progn
                (goto-char (point-max))
                (backward-char)
                (insert newline)))))
      (indent-region (mark) (point) nil)))

  (defun function-line-wrap ()
    "Line wrap function call or function definition."
    (interactive)
    (let ((original-point (point)))
      (save-excursion
        (mark-defun)
        (let ((defun-begin (point)) (defun-end (mark)))
          ;; Try the sexp that we are inside of.
          (goto-char original-point)
          ;; Move backward out of one level of parentheses (or blocks)
          ;; according to the mode.
          (funcall (key-binding (kbd "C-M-u")))
          (if (looking-at "(")
              (progn
                (set-mark (point))
                (forward-list)
                (region-line-wrap))
            ;; Try the sexp before original-point.
            (goto-char original-point)
            (re-search-backward ")" defun-begin)
            (backward-up-list)
            (set-mark (point))
            (forward-list)
            (region-line-wrap))))))

  (define-key global-map (kbd "<f2>") '(lambda () (interactive) (function-line-wrap)))
#+END_SRC

** Python

*** Formatting

When filling docstrings, put the initial triple quotes are on their
own line, and do not put a blank line before the closing triple
quotes.  If the docstring can fit on one line, do so.

#+BEGIN_SRC emacs-lisp
  (setq python-fill-docstring-style 'symmetric)
#+END_SRC

*** Static code checks (either ^C-^W or ^C-^V)

#+BEGIN_SRC emacs-lisp
  (setq py-pychecker-command "pycheck")
  (setq python-check-command "pycheck")
#+END_SRC

*** Simplify insertion of debugging print statements

#+BEGIN_SRC emacs-lisp
  (load "pyp.el")
#+END_SRC

*** Python editing

#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook
            (lambda ()
              (if (not (eq system-type 'windows-nt))
                  (flyspell-prog-mode))  ;on-the-fly spell check in comments
              (make-local-variable 'whitespace-style)
              (add-to-list 'whitespace-style 'lines-tail)  ;highlight cols beyond whitespace-line-column
              (define-key python-mode-map (kbd "C-c h") 'pylookup-lookup)  ;lookup in Python doc
              (define-key python-mode-map (kbd "<f12>") 'pyp)  ;insert debug print
              (define-key python-mode-map "\C-m" 'newline-and-indent)
              ))
#+END_SRC

*** Python doc lookup

See https://github.com/tsgates/pylookup

Run "M-x pylookup-update-all" to update database.

#+BEGIN_SRC emacs-lisp
  (require 'pylookup)  ; in ./elisp/
  (setq pylookup-program (os-path-join emacs-d-directory "bin" "pylookup.py"))  ;executable
  (setq pylookup-db-file (os-path-join emacs-cache-dir "pylookup.db"))  ;database
  (setq pylookup-html-locations '("/usr/share/doc/python2.7/html"))  ;doc source
  (autoload 'pylookup-lookup "pylookup"
    "Lookup SEARCH-TERM in the Python HTML indexes." t)
#+END_SRC

*** Python ropemacs refactoring

Currently this is too expensive to do for all Python files, so we load
ropemacs only if requested.

#+BEGIN_SRC emacs-lisp
  (defun load-ropemacs ()
    "Load pymacs and ropemacs."
    (interactive)
    (require 'pymacs)
    (setq ropemacs-enable-shortcuts nil)
    (pymacs-load "ropemacs" "rope-")
    (define-key ropemacs-local-keymap (kbd "M-/") 'rope-code-assist)
    (define-key ropemacs-local-keymap (kbd "C-c C-d") 'rope-show-doc)
    (define-key ropemacs-local-keymap (kbd "C-c C-g") 'rope-goto-definition)
    (define-key ropemacs-local-keymap (kbd "C-c C-f") 'rope-find-occurrences)
    ;; Automatically save project python buffers before refactorings.
    (setq ropemacs-confirm-saving nil))
  (global-set-key "\C-xpl" 'load-ropemacs)
#+END_SRC

*** Python vs. abbrev-mode

We don't use abbrev-mode explicitly, but elisp/python.el adds stuff to
python-mode-abbrev-table.  And then we are bothered about saving the
modified abbrevs.  So put the abbrev_defs file in var until we figure
it out.

#+BEGIN_SRC emacs-lisp
  (setq abbrev-file-name (os-path-join emacs-cache-dir "abbrev_defs"))
#+END_SRC

** Arduino

Major mode for arduino sketch (.ino) files.

#+BEGIN_SRC emacs-lisp
  (use-package arduino-mode
    :mode
    ("\\.ino\\'" . arduino-mode))
#+END_SRC

Reduce noise when compiling, and upload to Arduino by default.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'smart-compile-alist '(arduino-mode . "make -k -s upload"))
#+END_SRC

** CMake

#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode
    :mode (("\\.cmake\\'" . cmake-mode)
           ("CMakeLists\\.txt\\'" . cmake-mode))
    :config
    (add-hook 'cmake-mode-hook
              (lambda ()
                (setq-default cmake-tab-width 4)
                )))
#+END_SRC

** C

#+BEGIN_SRC emacs-lisp
  (defun adjust-indentation-style ()
    "Adjust C indentation style."
    ;; use C-c C-s to determine the syntactic symbol
    ;; use C-h v c-offsets-alist to see current setting for the
    ;; syntactic symbol
    (c-set-offset 'arglist-intro '+)  ; normal indent for first arg
    (c-set-offset 'case-label '+)  ; indent case, not flush w/ switch
    (c-set-offset 'arglist-close '0)  ; no indent for close paren
    )
  (add-hook 'c-mode-hook 'adjust-indentation-style)
#+END_SRC

** C++

#+BEGIN_SRC emacs-lisp
  (require 'c-includes)
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
  (add-hook 'c++-mode-hook 'adjust-indentation-style)
  (add-hook 'c++-mode-hook
            (lambda ()
              (define-key-after c++-mode-map
                [menu-bar C++ List\ Included\ Files\ Sep]
                '(menu-item "----"))
              (define-key-after c++-mode-map
                [menu-bar C++ List\ Included\ Files]
                '(menu-item "List Included Files" c-includes-current-file))
              (if (not (eq system-type 'windows-nt))
                  (flyspell-prog-mode))
              (setq-default c-basic-offset 4)
              ))
#+END_SRC

** C#

See http://www.emacswiki.org/emacs/CSharpMode

#+BEGIN_SRC emacs-lisp
  (use-package csharp-mode
    :mode ("\\.cs\\'" . csharp-mode)
    :config
    (add-hook 'csharp-mode-hook 'adjust-indentation-style)
    (add-hook 'csharp-mode-hook
              (lambda ()
                (if (not (eq system-type 'windows-nt))
                    (flyspell-prog-mode)))))
#+END_SRC

** Java

#+BEGIN_SRC emacs-lisp
  (add-hook 'java-mode-hook 'adjust-indentation-style)
#+END_SRC

** reStructuredText

See http://www.emacswiki.org/emacs/reStructuredText

#+BEGIN_SRC emacs-lisp
  (defun rst-compile-html-preview ()
    "Compile a rst file to html and view in a browser."
    (interactive)
    (let*
        ((bufname (file-name-nondirectory buffer-file-name))
         (basename (file-name-sans-extension bufname))
         (outname (os-path-join temporary-file-directory (concat basename ".html"))))
      (set (make-local-variable 'compile-command)
           (concat "rst2html --verbose " bufname " " outname))
      (call-interactively 'compile)
      (browse-url-of-file outname)))
  (add-to-list 'smart-compile-alist '(rst-mode rst-compile-html-preview))
#+END_SRC

** OpenSCAD

[[http://www.openscad.org/][OpenSCAD]] is software for creating solid 3D CAD objects.

#+BEGIN_SRC emacs-lisp
  (use-package scad-mode
    :mode ("\\.scad\\'" . scad-mode))
#+END_SRC

* Configuration Documentation

This configuration uses [[orgmode.org][org mode]] and [[https://github.com/jwiegley/use-package][use-package]].

Use "M-x list-packages" to see available and installed list of packages.
Use "M-x package-install" to install a new package.

** Example Configurations
  - [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]]
  - [[https://github.com/danielmai/.emacs.d/blob/master/config.org][Daniel Mai]]
  - [[http://www.howardism.org/Technical/Emacs/literate-devops.html][Literate devops at howardism.org]]
